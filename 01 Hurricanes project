# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def damages_udp_function(damages_data):
  damages_udp = []
  for dam in damages_data:
    if dam == "Damages not recorded":
      damages_udp.append(dam)
    elif dam[-1] == "M":
      damages_udp.append(float(dam[:-1]) * conversion['M'])
    elif dam[-1] == "B":
      damages_udp.append(float(dam[:-1]) * conversion['B'])

  return damages_udp

dam_upded = damages_udp_function(damages)

# 2 
# Create a Table

# Create and view the hurricanes dictionary

def huricans_by_name():
  hurricanes = {}
  for i in range(len(names)):
    hurricanes[names[i]] = {\
    "Name": names[i],
    "Month": months[i],
    "Year": years[i],
    "Max Sustained Wind": max_sustained_winds[i],
    "Areas Affected": areas_affected[i],
    "Damage": dam_upded[i],
    "Deaths": deaths[i]
    }
  return hurricanes

hurricanes = huricans_by_name()
# print(hurricanes)
# 3
# Organizing by Year
hurricanes_year = {}
def huricans_by_year():
  for i in range(len(years)):
    hurricanes_year[years[i]] = {\
    "Name": names[i],
    "Month": months[i],
    "Year": years[i],
    "Max Sustained Wind": max_sustained_winds[i],
    "Areas Affected": areas_affected[i],
    "Damage": dam_upded[i],
    "Deaths": deaths[i]
    }
  return hurricanes_year
# create a new dictionary of hurricanes with year and key
# print(huricans_by_year())

# 4
# Counting Damaged Areas
counted_areas = {}
def count_areas():
  for areas in areas_affected:
    for area in areas:
      if area in counted_areas.keys():
        counted_areas[area] += 1
      else:
        counted_areas[area] = 1
  return counted_areas
# create dictionary of areas to store the number of hurricanes involved in
# print(count_areas())

# 5 
# Calculating Maximum Hurricane Count
def the_most_affected():
  counted_areas = count_areas()
  max_area = ""
  max_area_count = 0
  for area in counted_areas.items():
    if area[1] > max_area_count:
      max_area, max_area_count = area[0], area[1]
  return max_area
# print(the_most_affected())
# find most frequently affected area and the number of hurricanes involved in


# 6
# Calculating the Deadliest Hurricane

def max_death():
  max_dearh_hur = {"name": "", "death": 0}
  for hurs in hurricanes.items():
    if hurs[1]["Deaths"] > max_dearh_hur["death"]:
      max_dearh_hur["name"] = hurs[0]
      max_dearh_hur["death"] = hurs[1]["Deaths"]
  return max_dearh_hur
    # break
# find highest mortality hurricane and the number of deaths
max_death = max_death()
# print(max_death())
# 7
# Rating Hurricanes by Mortality
#

  # Now you can add or remove ratings
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

# This function works for mortality and damage rating and takes as an input scale itself and filed to rate
def scaling(scale, field_name):
  # define new dict
  scale_hur = {}
  
  # find lenth of category dictinary
  len_scale = len(scale)

  # Create empty lists in new dict + 1 
  for i in range(len_scale + 1):
    scale_hur[i] = []

  # Go throuth the hurricanes dictionary
  for k, v in hurricanes.items():
    d = v[field_name]

    if type(d) == str:
      continue

    # Check if the value of deathes is more than max rating. If so add max rating + 1 and go ahead
    if d > scale[len_scale - 1]:
        scale_hur[len_scale].append(k)
    else:
      # Check every rating if deathes are in rating. If so break the loop
      for i in range(len_scale):
        if d <= scale[i]:
          scale_hur[i].append(k)
          break

  return scale_hur

# print(scaling( mortality_scale, "Deaths"))


# categorize hurricanes in new dictionary with mortality severity as key
hurricanes_by_mortality = scaling( mortality_scale, "Deaths")

# 8 Calculating Hurricane Maximum Damage

def max_damage():
  max_damage = {"name": "", "damage": 0}
  for k, v in hurricanes.items():
    if type(v["Damage"]) == str:
      continue
    
    if v["Damage"] > max_damage["damage"]:
      max_damage["name"] = k
      max_damage["damage"] = v["Damage"]
  return max_damage

# find highest damage inducing hurricane and its total cost
max_dam = max_damage()
# print(max_dam)

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
hurricanes_by_damage = scaling(damage_scale, "Damage")

print(hurricanes_by_damage)
